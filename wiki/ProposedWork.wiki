#summary Proposals for features in future versions of jai-tools

This page is where you can suggest features that you'd like to see in future versions of the library.  If you're not sure exactly where to put something just add it at the end of the page with enough detail so that everyone will know what you're talking about, then go to the [http://groups.google.com/group/jai-tools mailing list] and let us know.

<wiki:toc max_depth="3" />

= Proposals for Version 1.1 =

== Support and utilities module (utils) ==

=== JAITools create method ===

I *hate* having to repeat the operator name all the time...
{{{
ParameterBlockJAI pb = new ParameterBlockJAI("MaskedConvolve");

... set source and parameters then...

JAI.create("MaskedConvolve", pb, hints);  // grrrr... why repeat the op name ?
}}}

Instead I propose adding create method to the JAITools class that provide DRY (Don't Repeat Yourself) behaviour...
{{{
ParameterBlockJAI pb = new ParameterBlockJAI("MaskedConvolve");

... set source and parameters then...

JAITools.create(pb, hints);  // sigh of contentment...
}}}

=== New !BorderExtender classes ===

Two new !BorderExtender classes will be added to the utils module to provide options not covered by JAI's standard extenders. They are:

 * !RandomBorderExtender to generate pixel values drawn from a uniform random distribution (later add support for other distributions)

 * !SamplingBorderExtender to generate pixel values by sampling the local area of the source image within a set distance of each border pixel

(first cut versions of these are in the [http://jai-tools.googlecode.com/svn/branches/1.1_advance 1.1 work-in-advance branch])

=== Extended iterator classes ===

Extended JAI's standard iterator classes to add:

 * getX() and getY()  and getBand() methods for coordinates of the position
 * constructor that takes an ROI argument to create an iterator that skips pixels not contained in the ROI

=== Double comparison with adaptive tolerance ===

The current !DoubleComparison methods work with a fixed tolerance. Add new methods to work with proportional tolerance.

== Jiffle ==

=== Simplify compilation of Jiffle scripts ===

Jiffle scripts are 'compiled' into a runtime form (Abstract Syntax Tree) using a sequence of parsing and tree re-writing steps, each of which is defined by an ANTLR grammar file. Each of the existing grammar files clones all of  the previous grammar, even when the the step that the file defines is only working with a small subset.

The latest version of ANTLR makes this process simpler by allowing grammar subsets (known as tree patterns) to be used. This will make the Jiffle grammar files much shorter, and therefore easier to understand, modify and debug.

=== Add support for other image data types ===

Add support for other images data types for both input and output. Add the ability to specify the type of the output image, perhaps via a !RenderingHint.

== !ZonalStats operator ==

*Note: the following items have been implemented in version 1.0*

Make the zone image optional - if not provided the source image is treated as being in a single zone. This will allow the operator to also be used to calculate statistics selectively for areas defined in an ROI.

Relax the requirement that the zone image should cover the whole source image. If the zone image is provided treat any source image pixels that are beyond the bounds of the zone image as ignored.