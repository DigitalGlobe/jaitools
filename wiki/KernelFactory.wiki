#summary a helper class to create KernelJAI objects

=!KernelFactory=

==Description==

!KernelFactory is a class with static methods to make it easier to create KernelJAI objects with a variety of configurations...
 * circle
 * annulus
 * _more coming soon_

==Examples of use==

Here we create a kernel representing a raster circle with a radius of 3 pixels, as set by the first argument. The second argument specifies that elements within the circle will have a value of 1.0 (within the circle) or 0.0 (outside the circle). The third argument sets the value of the centre (key) kernel element.

{{{
KernelJAI circle = KernelFactory.createCircle(3, Kernel.ValueType.BINARY, 1.0);

// Let's have a look at it...
System.out.println(KernelUtil.kernelToString(circle, true);
}}}

Which produces this...

{{{
[[0001000]
 [0111110]
 [0111110]
 [1111111]
 [0111110]
 [0111110]
 [0001000]]
}}}

Next, an example of creating a kernel for distance-weighted operations...

Once again we create a circular kernel, this time with a radius of 3 pixels. The value of each element in the kernel will be the inverse of the distance to the kernel centre. We set the centre element's value is set to 1.0

{{{
KernelJAI distWt = KernelFactory.createCircle(3, Kernel.ValueType.INVERSE_DISTANCE, 1.0);
System.out.println(KernelUtil.kernelToString(distWt, true);
}}}

And this is the output...

{{{
[[0.0000 0.0000 0.0000 0.3333 0.0000 0.0000 0.0000]
 [0.0000 0.3536 0.4472 0.5000 0.4472 0.3536 0.0000]
 [0.0000 0.4472 0.7071 1.0000 0.7071 0.4472 0.0000]
 [0.3333 0.5000 1.0000 1.0000 1.0000 0.5000 0.3333]
 [0.0000 0.4472 0.7071 1.0000 0.7071 0.4472 0.0000]
 [0.0000 0.3536 0.4472 0.5000 0.4472 0.3536 0.0000]
 [0.0000 0.0000 0.0000 0.3333 0.0000 0.0000 0.0000]]
}}}

You can also make an annulus (doughnut) kernel. In this example we create a kernel with an outer radius of 3 pixels, and an inner radius (the hole in the doughnut) of 2 pixels.

{{{
KernelJAI annulus = KernelFactory.createAnnulus(3, 2, Kernel.ValueType.BINARY, 0.0);
System.out.println(KernelUtil.kernelToString(annulus, true);
}}}

Which prints this output...

{{{
[[0001000]
 [0110110]
 [0100010]
 [1000001]
 [0100010]
 [0110110]
 [0001000]]
}}}
