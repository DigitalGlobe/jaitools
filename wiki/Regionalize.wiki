#summary Identifies regions of uniform value within a user-specified tolerance

=Regionalize=

*package: jaitools.media.jai.regionalize*

==Description==

This operator identifies regions of uniform value in a source image, allocates each region a unique ID value, and produces an output image within which the value of each pixel is the ID of its region.

==Algorithm==

The operator scans the source image left to right, top to bottom. When it reaches a pixel that has not been allocated to a region yet it uses the pixel as the starting point for a flood-fill search (similar to flood-filling in a paint program). The value of the starting pixel is recorded as the _reference value_ for the new region. The search works its way outwards from the starting pixel, testing other pixels to for inclusion in the region. A pixel will be included if: `|value - reference value| <= tolerance` where `tolerance` is a user-specified parameter.

If the `diagonal` parameter is set to `true`, the flood-fill search will include pixels that can only be reached via a diagonal step; if `false`, only orthogonal steps are taken. So, if the source image was a chessboard pattern, setting diagonal to `true` would result in two regions being identified: one for all the black squares and the other for all the white squares; whereas `false` would result in each individual square being defined as a region.

The search continues until no further pixels can be added to the region. The region is then allocated a unique integer ID and summary statistics (bounds, number of pixels, reference value) are recorded for it.

==Outputs==

The operator produces an output image of TYPE_INT with the value of each pixel being the ID of the region that it belongs to.  Summary data for the regions, in the form of a RegionData object, is stored as a property of this image and can be retrieved using RegionalizeDescriptor.REGION_DATA_PROPERTY as the property name.

The RegionData object has a single public method, getData(), which returns an unmodifiable List of RegionRecs objects.

==Example of use==

{{{
RenderedImage myImg = ...

int band = 0;
double tolerance = 0.1d;
boolean diagonal = false;
RenderingHints hints = null;

RenderedOp op = RegionalizeDescriptor.create(myImg, band, tolerance, diagonal, hints);

// have a look at the image
jaitools.utils.ImageFrame frame = new jaitools.utils.ImageFrame();
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.displayImage(op, "Regions");

// print the summary data
// (note: at present it is essential to render the image, such as
//  by displaying it, before getting the region data)
RegionData regData =
   (RegionData)op.getProperty(RegionalizeDescriptor.REGION_DATA_PROPERTY);

List<RegionRec> recs = regData.getData();
Iterator<RegionRec> iter = recs.iterator();
System.out.println("ID\tValue\tSize\tMin X\tMax X\tMin Y\tMax Y");

while (iter.hasNext()) {
    RegionRec rec = iter.next();
    System.out.println( String.format("%d\t%.2f\t%d\t%d\t%d\t%d\t%d",
        rec.getId(),
        rec.getRefValue(),
        rec.getNumPixels(),
        rec.getMinX(),
        rec.getMaxX(),
        rec.getMinY(),
        rec.getMaxY() ));
}

}}}
