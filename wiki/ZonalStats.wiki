#summary summary statistics within image zones

=!ZonalStats=

*package:* jaitools.media.jai.zonalstats

==Description==

This operator calculates a range of summary statistics for values in zones, or regions, of a data image. The zones are defined using a separate zone image which must of integral type (e.g. TYPE_INT) and cover all data image locations.

By default, the zone image is taken to have the same origin, and at least as many rows and columns, as the data image. If this is not the case an !AffineTransform can be provided to transform from data image coordinates to zone image coordinates, allowing differences in image origins and dimensions to be accommodated.

Unlike the KernelStats operator, which outputs its results as image bands, ZonalStats works in the manner of standard JAI statistics operators such as "Histogram", simply passing pixel values through from the source data image to the destination image and storing the results of its calculations as a !ZonalStats object attached to the destination image as a property. The property name can be reliably referred to via the ZONAL_STATS_PROPERTY_NAME constant.

==Implementation details==

This operator uses !jaitools.numeric.StreamingSampleStats for its calculations, allowing it to handle very large images since sample data are not retained in memory. The exception is calculating the exact median (Statistic.MEDIAN), which will exhaust memory if the image is too large. An alternative median estimator is provided (Statistic.APPROX_MEDIAN) to handle such cases. This uses the remedian algorithm of Rousseeuw and Bassett (1990)^[Reference|ref]^ which performs well under general conditions but can produce biased estimates for degenerate sequences of data values (e.g. monotonically increasing or decreasing).

==Example of use==

{{{
 RenderedImage myData = ...
 RenderedImage myZones = ...
 
 ParameterBlockJAI pb = new ParameterBlockJAI("ZonalStats");
 pb.setSource("dataImage", myData);
 pb.setSource("zoneImage", myZones);
 
 Statistic[] stats = {
     Statistic.MIN,
     Statistic.MAX,
     Statistic.MEAN,
     Statistic.SDEV
 };
 
 pb.setParameter("stats", stats);
 RenderedOp op = JAI.create("ZonalStats", pb);
 
 ZonalStats results = (ZonalStats) op.getProperty(
     ZonalStatsDescriptor.ZONAL_STATS_PROPERTY_NAME);
 
 // print results to console
 for (Integer zone : results.getZones()) {
     System.out.println("Zone " + zone);
     Map<Statistic, Double> zoneResults = results.getZoneStats(zone);
     for (Entry<Statistic, Double> e : zoneResults.entrySet()) {
         System.out.println(String.format("%12s: %.4f", e.getKey(), e.getValue()));
     }
 }
}}} 
 

==Reference==
PJ Rousseeuw and GW Bassett (1990) _The remedian: a robust averaging method for large data sets._  Journal of the American Statistical Society 85:97-104 