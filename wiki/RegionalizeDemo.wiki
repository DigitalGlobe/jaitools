#summary Demo program for the Regionalize operator

=Regionalize demo=

*module:* demo <br>
*package:* jaitools.demo.regionalize

This program demonstrates the [Regionalize] operator which identifies areas of uniform value, within some specified tolerance, in a source image.

The input image has a chessboard pattern, where each square contains pixels with value 0.0 (black) or 1.0 (white).

http://jai-tools.googlecode.com/svn/wiki/images/chessboard.gif

First we regionalize this, requiring all pixels in a region to be orthogonally connected. Here's a code snippet from the program...

{{{
       /*
        * Regionalize the source chessboard image,
        * specifying orthogonal connectedness by setting the
        * diagonal parameter to false
        */
       ParameterBlockJAI pb = new ParameterBlockJAI("regionalize");
       pb.setSource("source0", image);
       pb.setParameter("diagonal", false);
       RenderedOp orthoImg = JAI.create("Regionalize", pb);
}}}

This results in each of the 64 chessboard squares being defined as a separate region, as shown in this image...

http://jai-tools.googlecode.com/svn/wiki/images/orthogonal_regions.gif

Note that the discontinuities in colour evident here are due to the region numbering scheme. Each region is given an integer ID, starting with 1. Because the source was a tiled image, the ID values are allocated as each tile is processed (although a region in the source image that spans tile boundaries will not be cut into separate regions in the output image).

Now we regionalize the chessboard image again, this time allowing regions to contain diagonally connected pixels. Here's the relevant snippet from the demo program...

{{{
       /*
        * Repeat the regionalization of the source image
        * allowing diagonal connections within regions
        */

       pb = new ParameterBlockJAI("regionalize");
       pb.setSource("source0", image);
       pb.setParameter("diagonal", true);
       RenderedOp diagImg = JAI.create("regionalize", pb);
}}}

And here is the output image showing that we now have only two regions: one corresponding to the black chessboard squares and the other corresponding to the white squares...

http://jai-tools.googlecode.com/svn/wiki/images/diagonal_regions.gif


