#summary Jiffle Frequently Asked Questions

<wiki:toc />

===Why ?===

Because it wasn't there. 

Because I wanted to play with [http://www.antlr.org ANTLR].

Because sometimes you would rather write a simple script than chain together a series of JAI operations explicitly for an image analysis task. 

Because it lends itself to being an easy to learn, application scripting language for your users.

===Can it deal with large images ?===

Jiffle uses JAI iterators for input and output so you can work with large tiled images.

===What image data types does Jiffle deal with ?===

Internally, Jiffle treats all values as doubles including pseudo-integer values for `true` (1) and `false` (0) in boolean expressions. Input images can be any data type: pixel values will be converted to double when they are read. Output images should be type double.

===Does it deal with multi-band images===

Not yet.

===How do I track multiple scripts running in a single interpreter ?===

The `JiffleInterpreter.submit` method returns a integer job ID. Use this in your event handling methods to distinguish individual jobs. 

In a simple example, where you know in advance how many jobs will be submitted, define some int fields in your class...

{{{
int job1ID = -1, job2ID = -1;
}}}

When submitting each compiled Jiffle object to the interpreter, get the job ID...

{{{
job1ID = myInterpreter.submit(jiffle1);
}}}

Then in an event handling method...
{{{
public void onCompletion(JiffleCompletionEvent ev) {
    if (ev.getJobID() == job1ID) {
        // do something

    } else if (ev.getJobID == job2ID) {
        // do something else
        
    }
}
}}}

For more flexibility, you might use a Map with Integer job IDs as keys and associated data, instructions, objects etc. as values
