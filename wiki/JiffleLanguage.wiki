#summary Description of the jiffle language

= Description of the language =

<wiki:toc max_depth="3" />

Jiffle's preliminary syntax will be familiar to C and Java programmers.  Most arithmetic and logical operators are identical, with the exception of `^` for exponentiation and `^|` for exclusive-or. 

The language is case sensitive. A statement is terminated by a semicolon and/or a newline (or any combination of the two)...

{{{
// jiffle will even handle this...
a = 3; b = 42

c = a / b ;;
    ;;;

// ...not that we recommend it
}}}

== Operators ==

=== Arithmetic operators ===
  `^` Raise to power <br>
  `*` Multiply <br>
  `/` Divide <br>
  `%` Modulo (remainder) <br>
  `+` Add <br>
  `-` Subtract <br>
  `=` Assignment <br>
  `+=` Additive assignment <br>
  `-=` Subtractive assignment <br>
  `*=` Multiplicative assignment <br>
  `/=` Divisive assignment <br>
  `%=` Modulo assignment <br>

Jiffle supports chained assignments...

{{{

a = b = c = 6 * 7;

}}}

=== Logical operators ===
  `&&` logical AND <br>
  `||` logical OR <br>
  `^|` logical XOR <br>
  `==` equality test <br>
  `!=` inequality test <br>
  `>`  greater than <br>
  `>=` greater than or equal to <br>
  `<=` less than <br>
  `<`  less than or equal to <br>
  `!`  logical complement <br>

=== Conditional expressions ===
Example:
{{{

z = (x > 2.5 ? 1 : 0);

}}}

== Built-in functions ==

=== General functions ===

|| *function* || *description*  || 
||`abs(x)`    || absolute value ||
||`log(x)`    || natural log    ||
||`log(x,b)`    || log of x to base b ||
||`sqrt(x)`   || square root    ||
||`sin(x)`    || sine of angle (radians) ||
||`cos(x)`    || cosine of angle (radians) ||
||`tan(x)`    || tangent of angle (radians) ||
||`asin(x)`   || inverse sine of angle (radians) ||
||`acos(x)`   || inverse cosine of angle (radians) ||
||`atan(x)`   || inverse tangent of angle (radians) ||
||`radToDeg(x)`|| convert radians to degrees ||
||`degToRad(x)`|| convert degrees to radians ||
||`rand(x)`   || random value in the range [0,x) ||
||`randInt(x)`|| random integer value in range [0,x)||
||`if(x)` || returns 1 if x != 0; otherwise 0 ||
||`if(x,a)` || returns a if x != 0; otherwise 0 ||
||`if(x,a,b)` || returns a if x != 0; otherwise b ||
||`if(x,a,b,c)` || returns a if x>0; b if x==0; otherwise c ||
|| `isnan(x)` || compares x to Double.NaN (Java) ||
|| `isinf(x)` || compares x to Double.Inf (Java) ||

All of the above functions take double arguments and return a double value (`randInt`
returns a floored double, logical functions return 1.0d for true and 0.0d for false).

=== Image functions ===

|| *function* || *description*  || 
|| x()        || pixel x pos from 0 to image width - 1 ||
|| y()        || pixel y pos from 0 to image height - 1 ||
|| row()      || pixel row from 1 to image height ||
|| col()      || pixel col from 1 to image width  ||
|| width()    || output image width ||
|| height()   || output image height ||

== Variables ==

Local variables can be defined to store double values. Logical values are stored as 1 (true) or 0 (false).

Variable names are case-sensitive and must start with a letter, optionally followed by letters, numbers and underscores.

Jiffle knows a small number of pre-defined constants: PI, E and NaN. 

The logical constants true and false are also defined and are *not* case sensitive...

{{{
// these are equivalent
lo = true; up = TRUE; silly = TruE;
}}}

== Comments ==

{{{
/* 
 * C-style block comments
 * are supported
 * in jiffle
 */

// As are line comments
}}}

= ANTLR grammar for jiffle =

*Note:* the ANTLR lexer / parser grammar file, Jiffle.g, with header sections and tree construction elements can be found in the svn repository [http://jai-tools.googlecode.com/svn/trunk/jiffle/src/main/antlr/jaitools/jiffle/parser/Jiffle.g here]

*Please treat this grammar as preliminary and assume that it contains errors*