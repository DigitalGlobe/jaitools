#summary Description of the jiffle language

= Description of the language =

<wiki:toc />

Jiffle's syntax will be familiar to C and Java programmers.  Most arithmetic and logical operators are identical, with the exception of `^` for exponentiation and `^|` for exclusive-or. 

The language is case sensitive. A statement is terminated by a semicolon and/or a newline...
 
{{{
// this is ok
a = 3; b = 42

// and even this
c = a / b ;;
    ;;;

// ...not that we recommend it
}}}

== Operators ==

=== Arithmetic operators ===
  `^` Raise to power <br>
  `*` Multiply <br>
  `/` Divide <br>
  `%` Modulo (remainder) <br>
  `+` Add <br>
  `-` Subtract <br>
  `=` Assignment <br>
  `+=` Additive assignment <br>
  `-=` Subtractive assignment <br>
  `*=` Multiplicative assignment <br>
  `/=` Divisive assignment <br>
  `%=` Modulo assignment <br>

Jiffle supports chained assignments...

{{{

a = b = c = 6 * 7;

}}}

=== Logical operators ===
  `&&` logical AND <br>
  `||` logical OR <br>
  `^|` logical XOR <br>
  `==` equality test <br>
  `!=` inequality test <br>
  `>`  greater than <br>
  `>=` greater than or equal to <br>
  `<=` less than <br>
  `<`  less than or equal to <br>
  `!`  logical complement <br>

=== Conditional (ternary) expressions ===
Example:
{{{

z = (x > 2.5 ? 1 : 0);

}}}
_See also the if(...) functions below_

== Built-in functions ==

=== General functions ===

|| *function* || *description*  || 
||`abs(x)`    || absolute value ||
||`log(x)`    || natural log    ||
||`log(x,b)`    || log of x to base b ||
||`sqrt(x)`   || square root    ||
||`sin(x)`    || sine of angle (radians) ||
||`cos(x)`    || cosine of angle (radians) ||
||`tan(x)`    || tangent of angle (radians) ||
||`asin(x)`   || inverse sine of angle (radians) ||
||`acos(x)`   || inverse cosine of angle (radians) ||
||`atan(x)`   || inverse tangent of angle (radians) ||
||`radToDeg(x)`|| convert radians to degrees ||
||`degToRad(x)`|| convert degrees to radians ||
||`rand(x)`   || random value in the range [0,x) ||
||`randInt(x)`|| random integer value in range [0,x)||
||`if(x)` || returns 1 if x != 0; otherwise 0 ||
||`if(x,a)` || returns a if x != 0; otherwise 0 ||
||`if(x,a,b)` || returns a if x != 0; otherwise b ||
||`if(x,a,b,c)` || returns a if x>0; b if x==0; otherwise c ||
|| `min(x1,x2...xn)` || min of values ||
|| `max(x1, x2...xn)` || max of values ||
|| `median(x1, x2...xn)` || median of values ||
|| `mode(x1, x2...xn)` || mode of values ||
|| `range(x1, x2...xn)` || range (max-min) of values ||
|| `isnan(x)` || compares x to Double.NaN (Java) ||
|| `isnull(x)` || same as isnan(x) ||
|| `isinf(x)` || compares x to Double.Inf (Java) ||
|| `null()` || returns Double.NaN ||

All of the above functions take double arguments and return a double value (`randInt`
returns a floored double, logical functions return 1.0d for true and 0.0d for false).

=== Image functions ===

|| *function* || *description*  || 
|| x()        || pixel x pos from 0 to image width - 1 ||
|| y()        || pixel y pos from 0 to image height - 1 ||
|| row()      || pixel row from 1 to image height ||
|| col()      || pixel col from 1 to image width  ||
|| width()    || output image width ||
|| height()   || output image height ||

== Variables ==

Variable names are case-sensitive and must start with a letter, optionally followed by letters, numbers and underscores.

===Image variables===

In a script, image objects are represented by variables. The user defines the mappings of variable name -> image object and provides these when compiling the script
(for more details see the Jiffle class in the [http://jai-tools.googlecode.com/svn/trunk/jiffle/apidocs/index.html API docs]).

A reference to an image variable in a script is read as _value of the current pixel in this image_

{{{
// Image vars on the RHS of an assignment are input images
x = sqrt(myImg + 1.0);

// An image var on the LHS of an assignment is an output (result) image
gradientImg = 5.0 + 10.0 * (1.0 - x()/width())
}}}

An image can be used either for input or output but not both.

You can also access the pixels in the neighbourhood of the current pixel (but only for input images). The syntax for this is
{{{
anImage[xOffset, yOffset]
}}}

For xOffset: negative values are to the left of the current pixel; positive values are to the right.

For yOffset: negative values are above the current pixel; negative values are below.

{{{
// look for pixels in an input image which have the same
// value as left and right hand neighbours
result = if (inImg == inImg[-1,0] == inImg[1,0], 1, 0)
}}}

===Non-image variables===
Local variables can be defined to store double values. Logical values are stored as 1 (true) or 0 (false).

Jiffle knows a small number of pre-defined constants: PI, E and NaN.

The logical constants true and false are also defined and are *not* case sensitive...

{{{
// these are equivalent
lo = true; up = TRUE; silly = TruE;
}}}

NULL is also defined as a constant and is not case sensitive.

== Comments ==

{{{
/* 
 * C-style block comments
 * are supported
 * in jiffle
 */

// As are line comments
}}}

= ANTLR grammar for jiffle =

*Note:* the ANTLR lexer / parser grammar file, Jiffle.g, with header sections and tree construction elements can be found in the svn repository [http://jai-tools.googlecode.com/svn/trunk/jiffle/src/main/antlr/jaitools/jiffle/parser/Jiffle.g here]

*Please treat this grammar as preliminary and assume that it contains errors*